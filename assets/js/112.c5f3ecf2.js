(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{349:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"promise-async-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-async-generator"}},[t._v("#")]),t._v(" Promise-async-generator")]),t._v(" "),a("h2",{attrs:{id:"generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator"}},[t._v("#")]),t._v(" Generator")]),t._v(" "),a("p",[a("code",[t._v("generator")]),t._v(" 迭代器语法中涉及的语法糖"),a("code",[t._v("*")]),t._v("和 "),a("code",[t._v("yield")]),t._v("。 "),a("code",[t._v("*")]),t._v("用在生成器函数的开头")]),t._v(" "),a("p",[t._v("在调用一个 "),a("code",[t._v("Generator")]),t._v(" 函数后，并不会立即执行其中的代码，函数会返回一个 "),a("code",[t._v("Generator")]),t._v(" 对象，通过调用对象的 "),a("code",[t._v("next")]),t._v(" 函数，可以获得 "),a("code",[t._v("yield/return")]),t._v(" 的返回值。")]),t._v(" "),a("p",[t._v("无论是触发了 "),a("code",[t._v("yield")]),t._v(" 还是 "),a("code",[t._v("return")]),t._v("，"),a("code",[t._v("next()")]),t._v("函数总会返回一个带有 "),a("code",[t._v("value")]),t._v(" 和 "),a("code",[t._v("done")]),t._v(" 属性的对象。\n"),a("code",[t._v("value")]),t._v(" 为返回值，"),a("code",[t._v("done")]),t._v(" 则是一个 "),a("code",[t._v("Boolean")]),t._v(" 对象，用来标识 "),a("code",[t._v("Generator")]),t._v(" 是否还能继续提供返回值。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("generator")]),t._v(" 使用特殊 "),a("code",[t._v("yield")]),t._v(" 语句来返回数据")]),t._v(" "),a("li",[a("code",[t._v("yield")]),t._v(" 语句保持以前的调用状态，并从它停止的地方继续。")]),t._v(" "),a("li",[t._v("如果 "),a("code",[t._v("yield")]),t._v(" 在循环中使用它，它只会在每次我们在调迭代器上调用 "),a("code",[t._v("next()")]),t._v("方法时执行一次")]),t._v(" "),a("li",[t._v("像 "),a("code",[t._v("return")]),t._v(" 关键字一样，"),a("code",[t._v("yield")]),t._v(" 关键字也会返回值")]),t._v(" "),a("li",[t._v("但允许在 "),a("code",[t._v("yield")]),t._v(" 之后拥有代码")]),t._v(" "),a("li",[t._v("可以有多个 yield")]),t._v(" "),a("li",[t._v("通过 "),a("code",[t._v("next")]),t._v(" 方法向 "),a("code",[t._v("generators")]),t._v(" 来回发送值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a simple generator function")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nres"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {value: 1, done: false}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result is 1,2,3,4,5")]),t._v("\n")])])]),a("h2",{attrs:{id:"async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[t._v("#")]),t._v(" async/await")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("async")]),t._v(" 函数返回的是一个 "),a("code",[t._v("Promise")]),t._v(" 对象")]),t._v(" "),a("li",[a("code",[t._v("async")]),t._v(" 返回一个 "),a("code",[t._v("Promise")]),t._v(" ，所以可以通过 "),a("code",[t._v("then")]),t._v(" 获取值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello async"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Promise 对象")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 hello async")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("await")]),t._v(" 后面可以是 "),a("code",[t._v("Promise")]),t._v(" 对象或其他表达式")]),t._v(" "),a("li",[a("code",[t._v("await")]),t._v(" 后面不是 "),a("code",[t._v("Promise")]),t._v(" 对象，直接执行")]),t._v(" "),a("li",[a("code",[t._v("await")]),t._v(" 后面是 "),a("code",[t._v("Promise")]),t._v(" 对象会阻塞后面的代码，"),a("code",[t._v("Promise")]),t._v(" 对象 "),a("code",[t._v("resolve")]),t._v("，然后得到 "),a("code",[t._v("resolve")]),t._v(" 的值，作为 "),a("code",[t._v("await")]),t._v(" 表达式的运算结果")])]),t._v(" "),a("h2",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Promise")]),t._v(" 接受一个函数 "),a("code",[t._v("handle")]),t._v(" 作为参数，"),a("code",[t._v("handle")]),t._v(" 包括 "),a("code",[t._v("resolve")]),t._v(" 和 "),a("code",[t._v("reject")]),t._v(" 两个是函数的参数")]),t._v(" "),a("li",[a("code",[t._v("Promise")]),t._v(" 相当于一个状态机,有三种状态:"),a("code",[t._v("pending,fulfilled,reject")]),t._v(",初始状态为 "),a("code",[t._v("pending")])]),t._v(" "),a("li",[t._v("调用 "),a("code",[t._v("resolve")]),t._v(",状态由 "),a("code",[t._v("pending => fulfilled")])]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("reject")]),t._v("，会由"),a("code",[t._v("pending => rejected")])]),t._v(" "),a("li",[a("code",[t._v("then")]),t._v(" 方法可以链式调用,每次返回一个新的 "),a("code",[t._v("Promise")])]),t._v(" "),a("li",[t._v("执行规则和错误捕获："),a("code",[t._v("then")]),t._v(" 的返回值如果是非 "),a("code",[t._v("Promise")]),t._v(" 直接作为下一个新 "),a("code",[t._v("Promise")]),t._v(" 参数，如果是 "),a("code",[t._v("Promise")]),t._v(" 会等 "),a("code",[t._v("Promise")]),t._v(" 执行")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这是第一个 resolve 值"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//会打印'这是第一个 resolve 值'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("async")]),t._v(" 是内置执行器，"),a("code",[t._v("Generator")]),t._v(" 函数的执行必须依靠执行器，无需手动执行"),a("code",[t._v("next()")])]),t._v(" "),a("li",[a("code",[t._v("yield")]),t._v(" 命令后面只能是 "),a("code",[t._v("Thunk")]),t._v(" 函数或 "),a("code",[t._v("Promise")]),t._v(" 对象，而 "),a("code",[t._v("await")]),t._v(" 后面可以是任意表达式，都会返回一个 "),a("code",[t._v("Promise")]),t._v(" 对象")]),t._v(" "),a("li",[a("code",[t._v("async")]),t._v(" 就相当于"),a("code",[t._v("Generator")]),t._v(" 的"),a("code",[t._v("*")]),t._v("，"),a("code",[t._v("await")]),t._v(" 相当于 "),a("code",[t._v("yield")]),t._v("，用法有很多相似之处")]),t._v(" "),a("li",[a("code",[t._v("async")]),t._v(" 函数返回的是一个 "),a("code",[t._v("Promise")]),t._v(" 对象")]),t._v(" "),a("li",[a("code",[t._v("async/await")]),t._v(" 基本上是 "),a("code",[t._v("Generators")]),t._v(" 的一个子集，并且有一个新的语法糖")]),t._v(" "),a("li",[a("code",[t._v("generator")]),t._v(" 函数返回的是 "),a("code",[t._v("Iterator")]),t._v(" 遍历器对象，所以 "),a("code",[t._v("async")]),t._v(" 函数执行后可以继续使用 "),a("code",[t._v("then")]),t._v(" 等方法来继续进行下面的逻辑")]),t._v(" "),a("li",[a("code",[t._v("async")]),t._v(" 函数就是 "),a("code",[t._v("Generator")]),t._v(" 函数的语法糖")])])])}),[],!1,null,null,null);s.default=e.exports}}]);