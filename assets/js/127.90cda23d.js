(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{328:function(t,e,a){"use strict";a.r(e);var s=a(10),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"webpack-output-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-output-配置"}},[t._v("#")]),t._v(" webpack output-配置")]),t._v(" "),a("p",[t._v("记一下比较常用的")]),t._v(" "),a("h2",{attrs:{id:"output-filename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-filename"}},[t._v("#")]),t._v(" output.filename")]),t._v(" "),a("p",[t._v("此选项决定了每个输出 "),a("code",[t._v("bundle")]),t._v(" 的名称。这些 "),a("code",[t._v("bundle")]),t._v(" 将写入到 "),a("code",[t._v("output.path")]),t._v(" 选项指定的目录下。")]),t._v(" "),a("p",[t._v("对于单个入口起点，"),a("code",[t._v("filename")]),t._v(" 会是一个静态名称。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("filename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bundle.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("通过多个入口起点("),a("code",[t._v("entry point")]),t._v(")、代码拆分("),a("code",[t._v("code splitting")]),t._v(")或各种插件("),a("code",[t._v("plugin")]),t._v(")创建多个 "),a("code",[t._v("bundle")]),t._v("，应该使用以下一种替换方式，来赋予每个 "),a("code",[t._v("bundle")]),t._v(" 一个唯一的名称")]),t._v(" "),a("p",[a("code",[t._v("filename")]),t._v(" 不会影响那些「"),a("code",[t._v("按需加载 chunk")]),t._v("」的输出文件")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用入口名称：")]),t._v("\nfilename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[name].bundle.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用内部 chunk id")]),t._v("\nfilename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[id].bundle.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash 模块标识符(module identifier)的 hash")]),t._v("\nfilename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[name].[hash].bundle.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基于每个 chunk 内容的 hash")]),t._v("\nfilename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[chunkhash].bundle.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [hash] 和 [chunkhash] 的长度可以使用 [hash:16]（默认为20）来指定。或者，通过指定output.hashDigestLength 在全局配置长度")]),t._v("\n")])])]),a("p",[t._v("注意:此选项被称为文件名，但是你还是可以使用像 "),a("code",[t._v("js/[name]/bundle.js")]),t._v(" 这样的文件夹结构")]),t._v(" "),a("h2",{attrs:{id:"output-chunkfilenam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-chunkfilenam"}},[t._v("#")]),t._v(" output.chunkFilenam")]),t._v(" "),a("p",[t._v("非入口("),a("code",[t._v("non-entry")]),t._v(") "),a("code",[t._v("chunk")]),t._v(" 文件的名称。未被列在 "),a("code",[t._v("entry")]),t._v(" 中，却又需要被打包出来的 "),a("code",[t._v("chunk")]),t._v(" 文件的名称.")]),t._v(" "),a("p",[t._v("注意，这些文件名需要在 "),a("code",[t._v("runtime")]),t._v(" 根据 "),a("code",[t._v("chunk")]),t._v(" 发送的请求去生成。因此，需要在 "),a("code",[t._v("webpack runtime")]),t._v(" 输出 "),a("code",[t._v("bundle")]),t._v(" 值时，将 "),a("code",[t._v("chunk id")]),t._v(" 的值对应映射到占位符(如 "),a("code",[t._v("[name]")]),t._v(" 和 "),a("code",[t._v("[chunkhash]")]),t._v(")。这会增加文件大小，并且在任何 "),a("code",[t._v("chunk")]),t._v(" 的占位符值修改后，都会使 "),a("code",[t._v("bundle")]),t._v(" 失效。")]),t._v(" "),a("p",[t._v("默认使用 "),a("code",[t._v("[id].js")]),t._v(" 或从 "),a("code",[t._v("output.filename")]),t._v(" 中推断出的值（"),a("code",[t._v("[name]")]),t._v(" 会被预先替换为 "),a("code",[t._v("[id]")]),t._v(" 或 "),a("code",[t._v("[id]")]),t._v(".）")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://juejin.im/post/5cede821f265da1bbd4b5630#heading-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://juejin.im/post/5cede821f265da1bbd4b5630#heading-2"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("对于一份同逻辑的代码，当我们手写下一个一个的文件，它们无论是 ESM 还是 commonJS 或是 AMD，他们都是 module ；")]),t._v(" "),a("p",[t._v("当我们写的 module 源文件传到 webpack 进行打包时，webpack 会根据文件引用关系生成 chunk 文件，webpack 会对这个 chunk 文件进行一些操作；")]),t._v(" "),a("p",[t._v("webpack 处理好 chunk 文件后，最后会输出 bundle 文件，这个 bundle 文件包含了经过加载和编译的最终源文件，所以它可以直接在浏览器中运行。")]),t._v(" "),a("p",[t._v("filename 指列在 entry 中，打包后输出的文件的名称。")]),t._v(" "),a("p",[t._v("chunkFilename 指未列在 entry 中，却又需要被打包出来的文件的名称。")])]),t._v(" "),a("h2",{attrs:{id:"output-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-path"}},[t._v("#")]),t._v(" output.path")]),t._v(" "),a("p",[a("code",[t._v("output")]),t._v(" 目录对应一个绝对路径")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dist/assets"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"output-publicpath"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-publicpath"}},[t._v("#")]),t._v(" output.publicPath")]),t._v(" "),a("p",[t._v("对于按需加载("),a("code",[t._v("on-demand-load")]),t._v(")或加载外部资源("),a("code",[t._v("external resources")]),t._v(")（如图片、文件等）来说，"),a("code",[t._v("output.publicPath")]),t._v(" 是很重要的选项。如果指定了一个错误的值，则在加载这些资源时会收到 "),a("code",[t._v("404")]),t._v(" 错误")]),t._v(" "),a("p",[a("code",[t._v("webpack-dev-server")]),t._v(" 也会默认从 "),a("code",[t._v("publicPath")]),t._v(" 为基准，使用它来决定在哪个目录下启用服务，来访问 "),a("code",[t._v("webpack")]),t._v(" 输出的文件")]),t._v(" "),a("p",[t._v("设置了"),a("code",[t._v("publicPath")]),t._v("后，会为资源添加一个前缀")]),t._v(" "),a("p",[t._v("此选项指定在浏览器中所引用的"),a("code",[t._v("「此输出目录对应的公开 URL」")]),t._v("。相对 "),a("code",[t._v("URL(relative URL)")]),t._v(" 会被相对于 HTML 页面（或 "),a("code",[t._v("<base>")]),t._v(" 标签）解析")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("publicPath"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/assets/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-> 资源路径就变为/assets/4.chunk.js;")]),t._v("\n")])])]),a("h2",{attrs:{id:"output-hashdigestlength"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-hashdigestlength"}},[t._v("#")]),t._v(" output.hashDigestLength")]),t._v(" "),a("p",[t._v("散列摘要的前缀长度，默认为 `")]),t._v(" "),a("h2",{attrs:{id:"output-hashfunction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-hashfunction"}},[t._v("#")]),t._v(" output.hashFunction")]),t._v(" "),a("p",[t._v("散列算法，默认为 "),a("code",[t._v("md5")]),t._v("。支持 "),a("code",[t._v("Node.JS crypto.createHash")]),t._v(" 的所有功能。从 "),a("code",[t._v("hashFunction")]),t._v(" 现在可以是一个返回自定义 "),a("code",[t._v("hash")]),t._v(" 的构造函数。出于性能原因，你可以提供一个不加密的哈希函数("),a("code",[t._v("non-crypto hash function")]),t._v(")。")])])}),[],!1,null,null,null);e.default=n.exports}}]);